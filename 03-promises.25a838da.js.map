{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEAC,EAAAF,GAASG,OAAOC,OAGf,IAAKC,EAAOC,SAASC,cAAc,SAyBpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAGpBA,E,IAlCPL,EAAKY,iBAAiB,UAAU,SAAUC,GACxCA,EAAEC,iBAMF,IAJA,IAAMC,EAAQC,SAAShB,EAAKiB,SAASZ,MAAMa,OACrCC,EAAOH,SAAShB,EAAKiB,SAASE,KAAKD,OACnCE,EAASJ,SAAShB,EAAKiB,SAASG,OAAOF,OAEpCG,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAIhClB,EAHiBkB,EACIN,GAASM,EAAI,GAAKF,GAGpCG,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBR,EAAAF,GAASG,OAAO0B,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,OACpEqB,QAAMC,IAAI,uBAAwCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAE3DuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBR,EAAAF,GAASG,OAAO+B,QAAQ,sBAAuCJ,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,OACnEqB,QAAMC,IAAI,sBAAuCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// Inicjalizacja Notiflix\nNotiflix.Notify.init();\n\n// Obsługa formularza\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', function (e) {\n  e.preventDefault();\n\n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const currentDelay = delay + (i - 1) * step;\n\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`); //Opcjonalnie\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`); //Opcjonalnie\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3; //Prawdopodobieństwo sukcesu\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill - sukces\n      } else {\n        reject({ position, delay });\n        // Reject - niepowodzenie\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$parcel$interopDefault","Notify","init","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","delay1","parseInt","elements","value","step","amount","i","then","param","success","concat","console","log","catch","failure"],"version":3,"file":"03-promises.25a838da.js.map"}